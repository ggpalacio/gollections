@startuml

interface Iterator<T any> {
    HasNext() bool
    Next() T
    Remove()
}

interface Predicate<T any> {
    Test(value T) bool
}

interface Comparator<T any> {
    Compare(value1, value2 T) int
}

interface Collection<T any> {
    Add(element T, elements ...T)
    AddAll(collection Collection<T>)
    Clear()
    Contains(element T) bool
    ContainsAll(collection Collection<T>) bool
    ContainsAny(collection Collection<T>) bool
    IsEmpty() bool
    Iterator() Iterator<T>
    Remove(element T, elements ...T)
    RemoveAll(collection Collection<T>)
    RemoveIf(predicate Predicate<T>)
    Retains(element T, elements ...T)
    RetainsAll(collection Collection<T>)
    RetainsIf(predicate Predicate<T>)
    Size() int
    ToArray() []T
}

interface List<T any> extends Collection {
    AddAt(index int, element T, elements ...T)
    AddAllAt(index int, collection Collection<T>)
    Get(index int) T
    IndexOf(element T) int
    LastIndexOf(element T) int
    RemoveAt(index int) T
    RemoveRange(fromIndex, toIndex int)
    Set(index int, element T)
    Sort(comparator Comparator<T>)
    SubList(fromIndex, toIndex int)
}

class ArrayList<T any> implements List

class LinkedList<T any> implements List {
    AddFirst(element T)
    AddLast(element T)
    GetFirst() T
    GetLast() T
    RemoveFirst(element T)
    RemoveLast(element T)
}

class Stack<T any> implements Collection {
    Top() T
    Pop() T
    Push(element T)
}

class Queue<T any> implements Collection {
    First() T
    Dequeue() T
    Enqueue(element T)
}

class Set<T any> implements Collection

class Bag<T any> implements Collection {
    AddN(element T, n int)
    Count(element T) int
    RemoveEvery(element T)
    RemoveN(element T, n int)
    ToSet() Set<T>
}

Collection *-- Iterator
Collection *-- Predicate
List *-- Comparator
Stack o-- LinkedList
Queue o-- LinkedList

@enduml